@import "./animations";

$button-circle-size: 40px;

/**
 * Types
 * Rounded:    <button class="rounded"></button>
 * Circle:     <button class="circle"></button>
 * Icon only:  <button class="icon"></button>
 *
 * States
 * Default:   <button class="default"></button>
 * Warning:   <button class="warning"></button>
 * Disabled:  <button class="disabled"></button>
 *            <button disabled></button>
 */
button {
  display: flex;
  align-items: center;
  cursor: pointer;
  background: var(--brand-green);
  font-size: var(--text-size-base);
  color: var(--text-color-button);
  border: none;
  border-radius: var(--border-radius);
  padding: 12px 18px;
  box-shadow: var(--green-shadow);
  transition: background-color 100ms $ease-out-back;

  &:active,
  &:focus {
    outline: none;
    box-shadow: var(--brand-green-shadow-touch);
    transform: translateY(2px);
  }

  svg {
    margin-right: calc(var(--base-gap) / 2);
    stroke: var(--text-color-button);

    rect,
    path,
    polygon {
      stroke: var(--text-color-button);
    }
  }


  &.inverse svg {
    stroke: var(--text-color-base);

    rect,
    path,
    polygon {
      stroke: var(--text-color-base);
    }
  }

  &.rounded {
    border-radius: var(--border-radius);
  }

  &.circle {
    border-radius: 50%;
    width: $button-circle-size;
    height: $button-circle-size;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0;

    svg {
      margin: 0 auto;
    }
  }

  &.icon {
    background: transparent;
    box-shadow: none;
    padding: 0;
  }

  &.default {
    background: white;
    box-shadow: var(--plain-shadow);
    color: var(--text-color-base);
  }

  &.warning {
    background: var(--brand-red);
    box-shadow: var(--brand-red)-shadow;
  }

  &.disabled,
  &[disabled] {
    background: var(--background-primary);
    color: var(--text-color-secondary);
    cursor: not-allowed;
    box-shadow: var(--inset-shadow);

    svg {
      opacity: 0.3;
      filter: invert(0);
    }
  }
}
